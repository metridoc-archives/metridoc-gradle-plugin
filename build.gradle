apply plugin: "groovy"
apply plugin: "application"
apply plugin: "maven"

archivesBaseName = "metridoc-gradle-plugin"
group = "com.github.metridoc"
version = new File(project.projectDir, "VERSION").text

buildscript {
    dependencies {
        classpath files("src/main/groovy")
        classpath files("src/main/resources")
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // gradleApi() drags in the Groovy bundled with Gradle, so always a good idea
    // to specify localGroovy() too
    compile localGroovy(), gradleApi()

    testCompile 'org.spockframework:spock-core:0.7-groovy-1.8', 'cglib:cglib-nodep:2.2.2'
}

task wrapper(type: Wrapper) {
    gradleVersion = "1.7"
}

uploadArchives {
    repositories {
        mavenDeployer {

            repository(
                    id: "Metridoc bintray repo",
                    url: "https://api.bintray.com/maven/upennlib/metridoc/metridoc-gradle-plugin",
            ) {
                authentication(userName: project.properties.bintrayUsername, password: project.properties.bintrayPassword)
            }
        }
    }
}

task("publishArchives", dependsOn: ["uploadArchives"]) << {
    def shouldPublish = project.hasProperty("publish") && Boolean.valueOf(project.properties.publish)
    if (shouldPublish) {
        def bintrayRepo = "https://api.bintray.com/content/upennlib/metridoc/" +
                "${project.properties.archivesBaseName}/$project.version/publish"
        project.logger.info "publishing to $bintrayRepo"
        new URI(bintrayRepo).toURL().openConnection().with {
            doOutput = true
            doInput = true
            // Add basic authentication header.
            def bintrayUsername = project.properties.bintrayUsername
            def bintrayPassword = project.properties.bintrayPassword
            setRequestProperty "Authorization", "Basic " + "$bintrayUsername:$bintrayPassword".getBytes().encodeBase64().toString()
            requestMethod = "POST"
            outputStream.flush()
            outputStream.close()
            project.logger.info inputStream.text
            inputStream.close()

            assert responseCode >= 200 && responseCode < 300
        }
    }
    else {
        project.logger.warn "artifacts may have been uploaded, but they have not been published"
    }
}

task("bumpVersion") << {
    def versionFile = new File("VERSION")
    def m = version =~ /^(\d+\.\d+)\.(\d+)$/
    assert m.matches(): "version $version is not in the [0.0.0] format"
    String majorVersionText = m.group(1)
    String minorVersionText = m.group(2)
    String newMinorVersionText = String.valueOf(Integer.valueOf(minorVersionText) + 1)
    String newVersion = "${majorVersionText}.${newMinorVersionText}-SNAPSHOT"
    versionFile.write(newVersion, "utf-8")
}
